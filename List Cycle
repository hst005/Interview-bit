//Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

//Try solving it using constant additional space.

ListNode* Solution::detectCycle(ListNode* head) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    
    if (head == NULL || head->next == NULL) 
        return NULL; 
  
    ListNode *slow = head, *fast = head; 
  
    slow = slow->next; 
    fast = fast->next->next; 
    while (fast && fast->next) { 
        if (slow == fast) 
            break; 
        slow = slow->next; 
        fast = fast->next->next; 
    } 
    if (slow != fast) 
        return NULL; 
    slow = head; 
    while (slow != fast) { 
        slow = slow->next; 
        fast = fast->next; 
    } 
  
    return slow; 
    
    
}
